{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"Comments\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"Create a Comment\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Create Comment\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h2\", null, _toDisplayString($setup.post.title), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.post.date), 1 /* TEXT */), _createElementVNode(\"p\", null, \"By \" + _toDisplayString($setup.post.user), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.post.content), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Tags: \" + _toDisplayString($setup.post.tags.join(\", \")), 1 /* TEXT */), _hoisted_1, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.post.comments, comment => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: comment.id\n    }, [_createElementVNode(\"p\", null, _toDisplayString(comment.content), 1 /* TEXT */), _createElementVNode(\"p\", null, \"By \" + _toDisplayString(comment.user), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _hoisted_2, _createElementVNode(\"form\", {\n    onSubmit: _cache[1] || (_cache[1] = _withModifiers((...args) => $setup.createComment && $setup.createComment(...args), [\"prevent\"]))\n  }, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.commentContent = $event),\n    rows: \"4\",\n    cols: \"50\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.commentContent]]), _hoisted_3, _hoisted_4], 32 /* HYDRATE_EVENTS */)]);\n}","map":{"version":3,"names":["_createElementVNode","type","_createElementBlock","_toDisplayString","$setup","post","title","date","user","content","tags","join","_hoisted_1","_Fragment","_renderList","comments","comment","key","id","_hoisted_2","onSubmit","_cache","_withModifiers","args","createComment","commentContent","$event","rows","cols","required","_hoisted_3","_hoisted_4"],"sources":["/Users/Abbe/Self techover/vue/frontend-coding-test/src/components/Post.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>{{ post.title }}</h2>\n    <p>{{ post.date }}</p>\n    <p>By {{ post.user }}</p>\n    <p>{{ post.content }}</p>\n    <p>Tags: {{ post.tags.join(\", \") }}</p>\n    <h3>Comments</h3>\n    <ul>\n      <li v-for=\"comment in post.comments\" :key=\"comment.id\">\n        <p>{{ comment.content }}</p>\n        <p>By {{ comment.user }}</p>\n      </li>\n    </ul>\n    <h3>Create a Comment</h3>\n    <form @submit.prevent=\"createComment\">\n      <textarea v-model=\"commentContent\" rows=\"4\" cols=\"50\" required></textarea>\n      <br />\n      <button type=\"submit\">Create Comment</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { useQuery, useMutation } from \"vue-query\";\n\nexport default {\n  name: \"Post\",\n  setup({ route }) {\n    const postId = route.params.id;\n    const { data: post } = useQuery([\"post\", postId], fetchPost);\n\n    async function fetchPost() {\n      const response = await fetch(\n        `https://dummyapi.io/data/api/post/${postId}`,\n        {\n          headers: {\n            \"app-id\": \"YOUR_DUMMY_API_APP_ID\",\n          },\n        }\n      );\n      const data = await response.json();\n      return data;\n    }\n\n    const { mutate: createComment } = useMutation(createNewComment);\n\n    let commentContent = \"\";\n\n    async function createNewComment() {\n      const newComment = {\n        content: commentContent,\n        // Add other comment properties if required\n      };\n\n      // Perform API call to create the comment\n      // ...\n\n      // Clear the comment content after submission\n      commentContent = \"\";\n    }\n\n    return {\n      post,\n      createComment,\n      commentContent,\n    };\n  },\n};\n</script>\n"],"mappings":";gCAOIA,mBAAA,CAAiB,YAAb,UAAQ;gCAOZA,mBAAA,CAAyB,YAArB,kBAAgB;gCAGlBA,mBAAA,CAAM;gCACNA,mBAAA,CAA6C;EAArCC,IAAI,EAAC;AAAQ,GAAC,gBAAc;;;uBAjBxCC,mBAAA,CAmBM,cAlBJF,mBAAA,CAAyB,YAAAG,gBAAA,CAAlBC,MAAA,CAAAC,IAAI,CAACC,KAAK,kBACjBN,mBAAA,CAAsB,WAAAG,gBAAA,CAAhBC,MAAA,CAAAC,IAAI,CAACE,IAAI,kBACfP,mBAAA,CAAyB,WAAtB,KAAG,GAAAG,gBAAA,CAAGC,MAAA,CAAAC,IAAI,CAACG,IAAI,kBAClBR,mBAAA,CAAyB,WAAAG,gBAAA,CAAnBC,MAAA,CAAAC,IAAI,CAACI,OAAO,kBAClBT,mBAAA,CAAuC,WAApC,QAAM,GAAAG,gBAAA,CAAGC,MAAA,CAAAC,IAAI,CAACK,IAAI,CAACC,IAAI,wBAC1BC,UAAiB,EACjBZ,mBAAA,CAKK,c,kBAJHE,mBAAA,CAGKW,SAAA,QAAAC,WAAA,CAHiBV,MAAA,CAAAC,IAAI,CAACU,QAAQ,EAAxBC,OAAO;yBAAlBd,mBAAA,CAGK;MAHiCe,GAAG,EAAED,OAAO,CAACE;QACjDlB,mBAAA,CAA4B,WAAAG,gBAAA,CAAtBa,OAAO,CAACP,OAAO,kBACrBT,mBAAA,CAA4B,WAAzB,KAAG,GAAAG,gBAAA,CAAGa,OAAO,CAACR,IAAI,iB;oCAGzBW,UAAyB,EACzBnB,mBAAA,CAIO;IAJAoB,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,KAAAC,IAAA,KAAUnB,MAAA,CAAAoB,aAAA,IAAApB,MAAA,CAAAoB,aAAA,IAAAD,IAAA,CAAa;sBAClCvB,mBAAA,CAA0E;+DAAvDI,MAAA,CAAAqB,cAAc,GAAAC,MAAA;IAAEC,IAAI,EAAC,GAAG;IAACC,IAAI,EAAC,IAAI;IAACC,QAAQ,EAAR;iDAAnCzB,MAAA,CAAAqB,cAAc,E,GACjCK,UAAM,EACNC,UAA6C,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}