{"ast":null,"code":"import { ref } from \"vue\";\nexport default {\n  name: \"CreatePost\",\n  setup() {\n    const newPost = ref({\n      owner: \"\",\n      text: \"\",\n      likes: 0,\n      tags: [],\n      publishDate: \"\",\n      post: \"\"\n    });\n    const createPost = async () => {\n      try {\n        const response = await fetch(\"https://dummyapi.io/data/v1/post/create\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"app-id\": \"YOUR_APP_ID\" // Replace with your actual API ID\n          },\n\n          body: JSON.stringify(newPost.value)\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to create post\");\n        }\n\n        // Handle success or redirect to home page\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    return {\n      newPost,\n      createPost\n    };\n  }\n};","map":{"version":3,"names":["ref","name","setup","newPost","owner","text","likes","tags","publishDate","post","createPost","response","fetch","method","headers","body","JSON","stringify","value","ok","Error","error","console"],"sources":["/Users/Abbe/Self techover/vue/frontend-coding-test/src/components/CreatePost.vue"],"sourcesContent":["<template>\n  <div class=\"create-post\">\n    <h2>Create Post</h2>\n    <form @submit.prevent=\"createPost\" class=\"post-form\">\n      <div class=\"form-group\">\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" v-model=\"newPost.owner\" required />\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"text\">Text</label>\n        <textarea id=\"text\" v-model=\"newPost.text\" required></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"likes\">Likes</label>\n        <input type=\"number\" id=\"likes\" v-model=\"newPost.likes\" required />\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"tags\">Tags</label>\n        <input type=\"text\" id=\"tags\" v-model=\"newPost.tags\" required />\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"publishDate\">Publish Date</label>\n        <input\n          type=\"datetime-local\"\n          id=\"publishDate\"\n          v-model=\"newPost.publishDate\"\n          required\n        />\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"post\">Post</label>\n        <textarea id=\"post\" v-model=\"newPost.post\" required></textarea>\n      </div>\n\n      <button type=\"submit\" class=\"submit-button\">Create</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { ref } from \"vue\";\n\nexport default {\n  name: \"CreatePost\",\n  setup() {\n    const newPost = ref({\n      owner: \"\",\n      text: \"\",\n      likes: 0,\n      tags: [],\n      publishDate: \"\",\n      post: \"\",\n    });\n\n    const createPost = async () => {\n      try {\n        const response = await fetch(\n          \"https://dummyapi.io/data/v1/post/create\",\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"app-id\": \"YOUR_APP_ID\", // Replace with your actual API ID\n            },\n            body: JSON.stringify(newPost.value),\n          }\n        );\n\n        if (!response.ok) {\n          throw new Error(\"Failed to create post\");\n        }\n\n        // Handle success or redirect to home page\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    return {\n      newPost,\n      createPost,\n    };\n  },\n};\n</script>\n\n<style scoped>\n/* Your CSS styles here */\n</style>\n\n<style scoped>\n.create-post {\n  max-width: 400px;\n  margin: 0 auto;\n}\n\nh2 {\n  font-size: 24px;\n  margin-bottom: 20 px;\n}\n\n.post-form {\n  display: flex;\n  flex-direction: column;\n}\n\n.form-group {\n  margin-bottom: 20px;\n}\n\nlabel {\n  font-weight: bold;\n  margin-bottom: 5px;\n}\n\ninput[type=\"text\"],\ninput[type=\"date\"],\ninput[type=\"email\"] {\n  width: 100%;\n  padding: 10px;\n  font-size: 16px;\n}\n\n.submit-button {\n  padding: 10px 20px;\n  background-color: #4caf50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n.submit-button:hover {\n  background-color: #45a049;\n}\n</style>\n"],"mappings":"AA6CA,SAASA,GAAE,QAAS,KAAK;AAEzB,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,KAAKA,CAAA,EAAG;IACN,MAAMC,OAAM,GAAIH,GAAG,CAAC;MAClBI,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,CAAC;MACRC,IAAI,EAAE,EAAE;MACRC,WAAW,EAAE,EAAE;MACfC,IAAI,EAAE;IACR,CAAC,CAAC;IAEF,MAAMC,UAAS,GAAI,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAC1B,yCAAyC,EACzC;UACEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,QAAQ,EAAE,aAAa,CAAE;UAC3B,CAAC;;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACd,OAAO,CAACe,KAAK;QACpC,CACF,CAAC;QAED,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;QAC1C;;QAEA;MACF,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAED,OAAO;MACLlB,OAAO;MACPO;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}