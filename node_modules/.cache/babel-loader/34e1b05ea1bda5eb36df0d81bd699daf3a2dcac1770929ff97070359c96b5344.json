{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Post\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"Comments\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"ul\", null, [/*#__PURE__*/_createCommentVNode(\" <li v-for=\\\"comment in comments\\\" :key=\\\"comment.id\\\">\\n        <p>{{ comment.owner.firstName }} {{ comment.owner.lastName }}:</p>\\n        <p>{{ comment.message }}</p>\\n      </li> \")], -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"Create Comment\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createCommentVNode(\" <p>{{ post.publishDate }}</p> \"), _createCommentVNode(\" <p>By {{ post.owner.firstName }} {{ post.owner.lastName }}</p> \"), _createCommentVNode(\" <p>{{ post.text }}</p> \"), _createCommentVNode(\" <p>Tags: {{ post.tags.join(\\\", \\\") }}</p> \"), _hoisted_2, _hoisted_3, _hoisted_4, _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.newComment = $event),\n    rows: \"3\",\n    cols: \"30\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newComment]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $setup.addComment && $setup.addComment(...args))\n  }, \"Add Comment\")]);\n}","map":{"version":3,"names":["_createElementVNode","_createCommentVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","$setup","newComment","$event","rows","cols","onClick","_cache","args","addComment"],"sources":["/Users/Abbe/Self techover/vue/frontend-coding-test/src/components/Post.vue"],"sourcesContent":["<template>\n  <div>\n    <p>Post</p>\n    <!-- <p>{{ post.publishDate }}</p> -->\n    <!-- <p>By {{ post.owner.firstName }} {{ post.owner.lastName }}</p> -->\n    <!-- <p>{{ post.text }}</p> -->\n    <!-- <p>Tags: {{ post.tags.join(\", \") }}</p> -->\n    <h3>Comments</h3>\n    <ul>\n      <!-- <li v-for=\"comment in comments\" :key=\"comment.id\">\n        <p>{{ comment.owner.firstName }} {{ comment.owner.lastName }}:</p>\n        <p>{{ comment.message }}</p>\n      </li> -->\n    </ul>\n    <h3>Create Comment</h3>\n    <textarea v-model=\"newComment\" rows=\"3\" cols=\"30\"></textarea>\n    <button @click=\"addComment\">Add Comment</button>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from \"vue\";\n\nexport default {\n  name: \"PostDetails\",\n  setup() {\n    const post = ref(null);\n    const comments = ref([]);\n    const newComment = ref(\"\");\n\n    const fetchPost = async () => {\n      try {\n        const response = await fetch(`https://dummyapi.io/data/v1/post/id=1`, {\n          headers: {\n            \"app-id\": \"645e1fa135277554efa9d769\",\n          },\n        });\n        const data = await response.json();\n        post.value = data;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const fetchComments = async () => {\n      try {\n        const response = await fetch(\n          `https://dummyapi.io/data/v1/post/${$route.params.id}/comment`,\n          {\n            headers: {\n              \"app-id\": \"645e1fa135277554efa9d769\",\n            },\n          }\n        );\n        const data = await response.json();\n        comments.value = data.data;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const addComment = async () => {\n      try {\n        const response = await fetch(\n          `https://dummyapi.io/data/v1/post/${$route.params.id}/comment`,\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"app-id\": \"645e1fa135277554efa9d769\",\n            },\n            body: JSON.stringify({\n              message: newComment.value,\n            }),\n          }\n        );\n        const data = await response.json();\n        comments.value.push(data);\n        newComment.value = \"\";\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    onMounted(() => {\n      fetchPost();\n      fetchComments();\n    });\n\n    return {\n      post,\n      comments,\n      newComment,\n      addComment,\n    };\n  },\n};\n</script>\n"],"mappings":";gCAEIA,mBAAA,CAAW,WAAR,MAAI;gCAKPA,mBAAA,CAAiB,YAAb,UAAQ;gCACZA,mBAAA,CAKK,a,aAJHC,mBAAA,2LAGS,C;gCAEXD,mBAAA,CAAuB,YAAnB,gBAAc;;;uBAbpBE,mBAAA,CAgBM,cAfJC,UAAW,EACXF,mBAAA,mCAAsC,EACtCA,mBAAA,oEAAuE,EACvEA,mBAAA,4BAA+B,EAC/BA,mBAAA,+CAAgD,EAChDG,UAAiB,EACjBC,UAKK,EACLC,UAAuB,E,gBACvBN,mBAAA,CAA6D;+DAA1CO,MAAA,CAAAC,UAAU,GAAAC,MAAA;IAAEC,IAAI,EAAC,GAAG;IAACC,IAAI,EAAC;iDAA1BJ,MAAA,CAAAC,UAAU,E,GAC7BR,mBAAA,CAAgD;IAAvCY,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEP,MAAA,CAAAQ,UAAA,IAAAR,MAAA,CAAAQ,UAAA,IAAAD,IAAA,CAAU;KAAE,aAAW,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}