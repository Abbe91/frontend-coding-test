{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Create Post\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"title\"\n}, \"Title\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"content\"\n}, \"Content\", -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Create\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $setup.createPost && $setup.createPost(...args), [\"prevent\"]))\n  }, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"title\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.newPost.title = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newPost.title]]), _hoisted_3, _withDirectives(_createElementVNode(\"textarea\", {\n    id: \"content\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.newPost.content = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newPost.content]]), _hoisted_4], 32 /* HYDRATE_EVENTS */)]);\n}","map":{"version":3,"names":["_createElementVNode","for","type","_createElementBlock","_hoisted_1","onSubmit","_cache","_withModifiers","args","$setup","createPost","_hoisted_2","id","newPost","title","$event","required","_hoisted_3","content","_hoisted_4"],"sources":["/Users/Abbe/Self techover/vue/frontend-coding-test/src/components/CreatePost.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Create Post</h2>\n    <form @submit.prevent=\"createPost\">\n      <label for=\"title\">Title</label>\n      <input type=\"text\" id=\"title\" v-model=\"newPost.title\" required />\n\n      <label for=\"content\">Content</label>\n      <textarea id=\"content\" v-model=\"newPost.content\" required></textarea>\n\n      <button type=\"submit\">Create</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { ref } from \"vue\";\n\nexport default {\n  name: \"CreatePost\",\n  setup() {\n    const newPost = ref({\n      title: \"\",\n      content: \"\",\n    });\n\n    const createPost = async () => {\n      try {\n        const response = await fetch(\n          \"https://dummyapi.io/data/v1/post/create\",\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"app-id\": \"645e1fa135277554efa9d769\", // Replace with your actual API ID\n            },\n            body: JSON.stringify(newPost.value),\n          }\n        );\n\n        if (!response.ok) {\n          throw new Error(\"Failed to create post\");\n        }\n\n        // Handle success or redirect to home page\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    return {\n      newPost,\n      createPost,\n    };\n  },\n};\n</script>\n"],"mappings":";gCAEIA,mBAAA,CAAoB,YAAhB,aAAW;gCAEbA,mBAAA,CAAgC;EAAzBC,GAAG,EAAC;AAAO,GAAC,OAAK;gCAGxBD,mBAAA,CAAoC;EAA7BC,GAAG,EAAC;AAAS,GAAC,SAAO;gCAG5BD,mBAAA,CAAqC;EAA7BE,IAAI,EAAC;AAAQ,GAAC,QAAM;;;uBAThCC,mBAAA,CAWM,cAVJC,UAAoB,EACpBJ,mBAAA,CAQO;IARAK,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,KAAAC,IAAA,KAAUC,MAAA,CAAAC,UAAA,IAAAD,MAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;MAC/BG,UAAgC,E,gBAChCX,mBAAA,CAAiE;IAA1DE,IAAI,EAAC,MAAM;IAACU,EAAE,EAAC,OAAO;+DAAUH,MAAA,CAAAI,OAAO,CAACC,KAAK,GAAAC,MAAA;IAAEC,QAAQ,EAAR;iDAAfP,MAAA,CAAAI,OAAO,CAACC,KAAK,E,GAEpDG,UAAoC,E,gBACpCjB,mBAAA,CAAqE;IAA3DY,EAAE,EAAC,SAAS;+DAAUH,MAAA,CAAAI,OAAO,CAACK,OAAO,GAAAH,MAAA;IAAEC,QAAQ,EAAR;iDAAjBP,MAAA,CAAAI,OAAO,CAACK,OAAO,E,GAE/CC,UAAqC,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}