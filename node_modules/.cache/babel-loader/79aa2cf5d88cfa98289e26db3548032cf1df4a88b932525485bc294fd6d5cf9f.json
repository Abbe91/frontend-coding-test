{"ast":null,"code":"import { ref } from \"vue\";\nexport default {\n  name: \"CreatePost\",\n  setup() {\n    const newPost = ref({\n      text: \"\",\n      likes: 0,\n      tags: [],\n      owner: {\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\"\n      },\n      publishDate: \"\"\n    });\n    const createPost = async () => {\n      try {\n        // First, create the user\n        const userResponse = await fetch(\"https://dummyapi.io/post/create\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"app-id\": \"645e1fa135277554efa9d769\" // Replace with your actual app ID\n          },\n\n          body: JSON.stringify(newPost.value.owner)\n        });\n        if (!userResponse.ok) {\n          throw new Error(\"Failed to create user\");\n        }\n        const user = await userResponse.json();\n\n        // Update the post object with the created user's ID\n        newPost.value.owner = user;\n\n        // Create the post\n        const postResponse = await fetch(\"https://dummyapi.io/post/create\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"app-id\": \"645e1fa135277554efa9d769\" // Replace with your actual app ID\n          },\n\n          body: JSON.stringify(newPost.value)\n        });\n        if (!postResponse.ok) {\n          throw new Error(\"Failed to create post\");\n        }\n\n        // Handle success or redirect to home page\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    return {\n      newPost,\n      createPost\n    };\n  }\n};","map":{"version":3,"names":["ref","name","setup","newPost","text","likes","tags","owner","firstName","lastName","email","publishDate","createPost","userResponse","fetch","method","headers","body","JSON","stringify","value","ok","Error","user","json","postResponse","error","console"],"sources":["/Users/Abbe/Self techover/vue/frontend-coding-test/src/components/CreatePost.vue"],"sourcesContent":["<template>\n  <div class=\"create-post\">\n    <h2>Create Post</h2>\n    <form @submit.prevent=\"createPost\" class=\"post-form\">\n      <div class=\"form-group\">\n        <label for=\"title\">Title</label>\n        <input type=\"text\" id=\"title\" v-model=\"newPost.text\" required />\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"tags\">Tags</label>\n        <input type=\"text\" id=\"tags\" v-model=\"newPost.tags\" required />\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"publishDate\">Publish Date</label>\n        <input\n          type=\"date\"\n          id=\"publishDate\"\n          v-model=\"newPost.publishDate\"\n          required\n        />\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"ownerFirstName\">Owner First Name</label>\n        <input\n          type=\"text\"\n          id=\"ownerFirstName\"\n          v-model=\"newPost.owner.firstName\"\n          required\n        />\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"ownerLastName\">Owner Last Name</label>\n        <input\n          type=\"text\"\n          id=\"ownerLastName\"\n          v-model=\"newPost.owner.lastName\"\n          required\n        />\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"ownerEmail\">Owner Email</label>\n        <input\n          type=\"email\"\n          id=\"ownerEmail\"\n          v-model=\"newPost.owner.email\"\n          required\n        />\n      </div>\n\n      <button type=\"submit\" class=\"submit-button\">Create</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { ref } from \"vue\";\n\nexport default {\n  name: \"CreatePost\",\n  setup() {\n    const newPost = ref({\n      text: \"\",\n      likes: 0,\n      tags: [],\n      owner: {\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n      },\n      publishDate: \"\",\n    });\n\n    const createPost = async () => {\n      try {\n        // First, create the user\n        const userResponse = await fetch(\"https://dummyapi.io/post/create\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"app-id\": \"645e1fa135277554efa9d769\", // Replace with your actual app ID\n          },\n          body: JSON.stringify(newPost.value.owner),\n        });\n\n        if (!userResponse.ok) {\n          throw new Error(\"Failed to create user\");\n        }\n\n        const user = await userResponse.json();\n\n        // Update the post object with the created user's ID\n        newPost.value.owner = user;\n\n        // Create the post\n        const postResponse = await fetch(\"https://dummyapi.io/post/create\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"app-id\": \"645e1fa135277554efa9d769\", // Replace with your actual app ID\n          },\n          body: JSON.stringify(newPost.value),\n        });\n\n        if (!postResponse.ok) {\n          throw new Error(\"Failed to create post\");\n        }\n\n        // Handle success or redirect to home page\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    return {\n      newPost,\n      createPost,\n    };\n  },\n};\n</script>\n\n<style scoped>\n.create-post {\n  max-width: 400px;\n  margin: 0 auto;\n}\n\nh2 {\n  font-size: 24px;\n  margin-bottom: 20 px;\n}\n\n.post-form {\n  display: flex;\n  flex-direction: column;\n}\n\n.form-group {\n  margin-bottom: 20px;\n}\n\nlabel {\n  font-weight: bold;\n  margin-bottom: 5px;\n}\n\ninput[type=\"text\"],\ninput[type=\"date\"],\ninput[type=\"email\"] {\n  width: 100%;\n  padding: 10px;\n  font-size: 16px;\n}\n\n.submit-button {\n  padding: 10px 20px;\n  background-color: #4caf50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n.submit-button:hover {\n  background-color: #45a049;\n}\n</style>\n"],"mappings":"AA4DA,SAASA,GAAE,QAAS,KAAK;AAEzB,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,KAAKA,CAAA,EAAG;IACN,MAAMC,OAAM,GAAIH,GAAG,CAAC;MAClBI,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,CAAC;MACRC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE;QACLC,SAAS,EAAE,EAAE;QACbC,QAAQ,EAAE,EAAE;QACZC,KAAK,EAAE;MACT,CAAC;MACDC,WAAW,EAAE;IACf,CAAC,CAAC;IAEF,MAAMC,UAAS,GAAI,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF;QACA,MAAMC,YAAW,GAAI,MAAMC,KAAK,CAAC,iCAAiC,EAAE;UAClEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,QAAQ,EAAE,0BAA0B,CAAE;UACxC,CAAC;;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAChB,OAAO,CAACiB,KAAK,CAACb,KAAK;QAC1C,CAAC,CAAC;QAEF,IAAI,CAACM,YAAY,CAACQ,EAAE,EAAE;UACpB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;QAC1C;QAEA,MAAMC,IAAG,GAAI,MAAMV,YAAY,CAACW,IAAI,CAAC,CAAC;;QAEtC;QACArB,OAAO,CAACiB,KAAK,CAACb,KAAI,GAAIgB,IAAI;;QAE1B;QACA,MAAME,YAAW,GAAI,MAAMX,KAAK,CAAC,iCAAiC,EAAE;UAClEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,QAAQ,EAAE,0BAA0B,CAAE;UACxC,CAAC;;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAChB,OAAO,CAACiB,KAAK;QACpC,CAAC,CAAC;QAEF,IAAI,CAACK,YAAY,CAACJ,EAAE,EAAE;UACpB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;QAC1C;;QAEA;MACF,EAAE,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAED,OAAO;MACLvB,OAAO;MACPS;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}