{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", {\n  class: \"title\"\n}, \"Post\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h3\", {\n  class: \"subtitle\"\n}, \"Comments\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  class: \"comment-author\"\n};\nconst _hoisted_4 = {\n  class: \"comment-message\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"h3\", {\n  class: \"subtitle\"\n}, \"Create Comment\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _hoisted_2, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.comments, comment => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: comment.id,\n      class: \"comment\"\n    }, [_createElementVNode(\"p\", _hoisted_3, _toDisplayString(comment.owner.firstName) + \" \" + _toDisplayString(comment.owner.lastName) + \": \", 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_4, _toDisplayString(comment.message), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _hoisted_5, _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.newComment = $event),\n    class: \"comment-input\",\n    rows: \"3\",\n    cols: \"30\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newComment]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $setup.addComment && $setup.addComment(...args)),\n    class: \"comment-button\"\n  }, \"Add Comment\")]);\n}","map":{"version":3,"names":["_createElementVNode","class","_createElementBlock","_hoisted_1","_hoisted_2","_Fragment","_renderList","$setup","comments","comment","key","id","_hoisted_3","_toDisplayString","owner","firstName","lastName","_hoisted_4","message","_hoisted_5","newComment","$event","rows","cols","onClick","_cache","args","addComment"],"sources":["/Users/Abbe/Self techover/vue/frontend-coding-test/src/components/Post.vue"],"sourcesContent":["<template>\n  <div>\n    <h2 class=\"title\">Post</h2>\n    <h3 class=\"subtitle\">Comments</h3>\n    <ul>\n      <li v-for=\"comment in comments\" :key=\"comment.id\" class=\"comment\">\n        <p class=\"comment-author\">\n          {{ comment.owner.firstName }} {{ comment.owner.lastName }}:\n        </p>\n        <p class=\"comment-message\">{{ comment.message }}</p>\n      </li>\n    </ul>\n    <h3 class=\"subtitle\">Create Comment</h3>\n    <textarea\n      v-model=\"newComment\"\n      class=\"comment-input\"\n      rows=\"3\"\n      cols=\"30\"\n    ></textarea>\n    <button @click=\"addComment\" class=\"comment-button\">Add Comment</button>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from \"vue\";\n\nexport default {\n  name: \"PostDetails\",\n  setup() {\n    const post = ref(null);\n    const comments = ref([]);\n    const newComment = ref(\"\");\n\n    const fetchPost = async () => {\n      try {\n        const response = await fetch(\n          `https://dummyapi.io/data/v1/post/${$route.params.id}`,\n          {\n            headers: {\n              \"app-id\": \"645e1fa135277554efa9d769\",\n            },\n          }\n        );\n        const data = await response.json();\n        post.value = data;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const fetchComments = async () => {\n      try {\n        const response = await fetch(\n          `https://dummyapi.io/data/v1/post/${$route.params.id}/comment`,\n          {\n            headers: {\n              \"app-id\": \"645e1fa135277554efa9d769\",\n            },\n          }\n        );\n        const data = await response.json();\n        comments.value = data.data;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const addComment = async () => {\n      try {\n        const response = await fetch(\n          `https://dummyapi.io/data/v1/post/${$route.params.id}/comment`,\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"app-id\": \"645e1fa135277554efa9d769\",\n            },\n            body: JSON.stringify({\n              message: newComment.value,\n            }),\n          }\n        );\n        const data = await response.json();\n        comments.value.push(data);\n        newComment.value = \"\";\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    onMounted(() => {\n      fetchPost();\n      fetchComments();\n    });\n\n    return {\n      post,\n      comments,\n      newComment,\n      addComment,\n    };\n  },\n};\n</script>\n\n<style>\n.container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n}\n\n.box {\n  max-width: 400px;\n  padding: 20px;\n  background-color: #f5f5f5;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.title {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.subtitle {\n  font-size: 18px;\n  margin-bottom: 10px;\n}\n\n.comment {\n  margin-bottom: 10px;\n}\n\n.comment-author {\n  font-weight: bold;\n}\n\n.comment-message {\n  margin-left: 20px;\n}\n\n.comment-input {\n  width: 100%;\n  height: 80px;\n  resize: vertical;\n  margin-bottom: 10px;\n  padding: 5px;\n}\n\n.comment-button {\n  background-color: #4caf50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n.comment-button:hover {\n  background-color: #45a049;\n}\n</style>\n"],"mappings":";gCAEIA,mBAAA,CAA2B;EAAvBC,KAAK,EAAC;AAAO,GAAC,MAAI;gCACtBD,mBAAA,CAAkC;EAA9BC,KAAK,EAAC;AAAU,GAAC,UAAQ;;EAGtBA,KAAK,EAAC;AAAgB;;EAGtBA,KAAK,EAAC;AAAiB;gCAG9BD,mBAAA,CAAwC;EAApCC,KAAK,EAAC;AAAU,GAAC,gBAAc;;;uBAXrCC,mBAAA,CAmBM,cAlBJC,UAA2B,EAC3BC,UAAkC,EAClCJ,mBAAA,CAOK,c,kBANHE,mBAAA,CAKKG,SAAA,QAAAC,WAAA,CALiBC,MAAA,CAAAC,QAAQ,EAAnBC,OAAO;yBAAlBP,mBAAA,CAKK;MAL4BQ,GAAG,EAAED,OAAO,CAACE,EAAE;MAAEV,KAAK,EAAC;QACtDD,mBAAA,CAEI,KAFJY,UAEI,EAAAC,gBAAA,CADCJ,OAAO,CAACK,KAAK,CAACC,SAAS,IAAG,GAAC,GAAAF,gBAAA,CAAGJ,OAAO,CAACK,KAAK,CAACE,QAAQ,IAAG,IAC5D,iBACAhB,mBAAA,CAAoD,KAApDiB,UAAoD,EAAAJ,gBAAA,CAAtBJ,OAAO,CAACS,OAAO,iB;oCAGjDC,UAAwC,E,gBACxCnB,mBAAA,CAKY;+DAJDO,MAAA,CAAAa,UAAU,GAAAC,MAAA;IACnBpB,KAAK,EAAC,eAAe;IACrBqB,IAAI,EAAC,GAAG;IACRC,IAAI,EAAC;iDAHIhB,MAAA,CAAAa,UAAU,E,GAKrBpB,mBAAA,CAAuE;IAA9DwB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEnB,MAAA,CAAAoB,UAAA,IAAApB,MAAA,CAAAoB,UAAA,IAAAD,IAAA,CAAU;IAAEzB,KAAK,EAAC;KAAiB,aAAW,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}