{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted } from \"vue\";\nexport default {\n  name: \"PostDetails\",\n  setup() {\n    const post = ref(null);\n    const comments = ref([]);\n    const newComment = ref(\"\");\n    const fetchPost = async () => {\n      try {\n        const response = await fetch(`https://dummyapi.io/data/v1/post/${$route.params.id}`, {\n          headers: {\n            \"app-id\": \"645e1fa135277554efa9d769\"\n          }\n        });\n        const data = await response.json();\n        post.value = data;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const fetchComments = async () => {\n      try {\n        const response = await fetch(`https://dummyapi.io/data/v1/post/${$route.params.id}/comment`, {\n          headers: {\n            \"app-id\": \"645e1fa135277554efa9d769\"\n          }\n        });\n        const data = await response.json();\n        comments.value = data.data;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const addComment = async () => {\n      try {\n        const response = await fetch(`https://dummyapi.io/data/v1/post/${$route.params.id}/comment`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"app-id\": \"645e1fa135277554efa9d769\"\n          },\n          body: JSON.stringify({\n            message: newComment.value\n          })\n        });\n        const data = await response.json();\n        comments.value.push(data);\n        newComment.value = \"\";\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    onMounted(() => {\n      fetchPost();\n      fetchComments();\n    });\n    return {\n      post,\n      comments,\n      newComment,\n      addComment\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","name","setup","post","comments","newComment","fetchPost","response","fetch","$route","params","id","headers","data","json","value","error","console","fetchComments","addComment","method","body","JSON","stringify","message","push"],"sources":["/Users/Abbe/Self techover/vue/frontend-coding-test/src/components/Post.vue"],"sourcesContent":["<template>\n  <div class=\"post\">\n    <h2 class=\"title\">Post</h2>\n    <h3 class=\"subtitle\">Comments</h3>\n    <ul>\n      <li v-for=\"comment in comments\" :key=\"comment.id\" class=\"comment\">\n        <p class=\"comment-author\">\n          {{ comment.owner.firstName }} {{ comment.owner.lastName }}:\n        </p>\n        <p class=\"comment-message\">{{ comment.message }}</p>\n      </li>\n    </ul>\n    <h3 class=\"subtitle\">Create Comment</h3>\n    <textarea\n      v-model=\"newComment\"\n      class=\"comment-input\"\n      rows=\"3\"\n      cols=\"30\"\n    ></textarea>\n    <button @click=\"addComment\" class=\"comment-button\">Add Comment</button>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from \"vue\";\n\nexport default {\n  name: \"PostDetails\",\n  setup() {\n    const post = ref(null);\n    const comments = ref([]);\n    const newComment = ref(\"\");\n\n    const fetchPost = async () => {\n      try {\n        const response = await fetch(\n          `https://dummyapi.io/data/v1/post/${$route.params.id}`,\n          {\n            headers: {\n              \"app-id\": \"645e1fa135277554efa9d769\",\n            },\n          }\n        );\n        const data = await response.json();\n        post.value = data;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const fetchComments = async () => {\n      try {\n        const response = await fetch(\n          `https://dummyapi.io/data/v1/post/${$route.params.id}/comment`,\n          {\n            headers: {\n              \"app-id\": \"645e1fa135277554efa9d769\",\n            },\n          }\n        );\n        const data = await response.json();\n        comments.value = data.data;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const addComment = async () => {\n      try {\n        const response = await fetch(\n          `https://dummyapi.io/data/v1/post/${$route.params.id}/comment`,\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"app-id\": \"645e1fa135277554efa9d769\",\n            },\n            body: JSON.stringify({\n              message: newComment.value,\n            }),\n          }\n        );\n        const data = await response.json();\n        comments.value.push(data);\n        newComment.value = \"\";\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    onMounted(() => {\n      fetchPost();\n      fetchComments();\n    });\n\n    return {\n      post,\n      comments,\n      newComment,\n      addComment,\n    };\n  },\n};\n</script>\n\n<style>\n.post {\n  max-width: 400px;\n  margin: 0 auto;\n}\n.container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n}\n\n.box {\n  max-width: 400px;\n  padding: 20px;\n  background-color: #f5f5f5;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.title {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.subtitle {\n  font-size: 18px;\n  margin-bottom: 10px;\n}\n\n.comment {\n  margin-bottom: 10px;\n}\n\n.comment-author {\n  font-weight: bold;\n}\n\n.comment-message {\n  margin-left: 20px;\n}\n\n.comment-input {\n  width: 100%;\n  height: 80px;\n  resize: vertical;\n  margin-bottom: 10px;\n  padding: 5px;\n}\n\n.comment-button {\n  padding: 10px 20px;\n  background-color: #4caf50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n.comment-button:hover {\n  background-color: #45a049;\n}\n</style>\n"],"mappings":";AAwBA,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAK;AAEpC,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,KAAKA,CAAA,EAAG;IACN,MAAMC,IAAG,GAAIJ,GAAG,CAAC,IAAI,CAAC;IACtB,MAAMK,QAAO,GAAIL,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMM,UAAS,GAAIN,GAAG,CAAC,EAAE,CAAC;IAE1B,MAAMO,SAAQ,GAAI,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CACzB,oCAAmCC,MAAM,CAACC,MAAM,CAACC,EAAG,EAAC,EACtD;UACEC,OAAO,EAAE;YACP,QAAQ,EAAE;UACZ;QACF,CACF,CAAC;QACD,MAAMC,IAAG,GAAI,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;QAClCX,IAAI,CAACY,KAAI,GAAIF,IAAI;MACnB,EAAE,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAED,MAAME,aAAY,GAAI,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMX,QAAO,GAAI,MAAMC,KAAK,CACzB,oCAAmCC,MAAM,CAACC,MAAM,CAACC,EAAG,UAAS,EAC9D;UACEC,OAAO,EAAE;YACP,QAAQ,EAAE;UACZ;QACF,CACF,CAAC;QACD,MAAMC,IAAG,GAAI,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;QAClCV,QAAQ,CAACW,KAAI,GAAIF,IAAI,CAACA,IAAI;MAC5B,EAAE,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAED,MAAMG,UAAS,GAAI,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMZ,QAAO,GAAI,MAAMC,KAAK,CACzB,oCAAmCC,MAAM,CAACC,MAAM,CAACC,EAAG,UAAS,EAC9D;UACES,MAAM,EAAE,MAAM;UACdR,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,QAAQ,EAAE;UACZ,CAAC;UACDS,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBC,OAAO,EAAEnB,UAAU,CAACU;UACtB,CAAC;QACH,CACF,CAAC;QACD,MAAMF,IAAG,GAAI,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;QAClCV,QAAQ,CAACW,KAAK,CAACU,IAAI,CAACZ,IAAI,CAAC;QACzBR,UAAU,CAACU,KAAI,GAAI,EAAE;MACvB,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAEDhB,SAAS,CAAC,MAAM;MACdM,SAAS,CAAC,CAAC;MACXY,aAAa,CAAC,CAAC;IACjB,CAAC,CAAC;IAEF,OAAO;MACLf,IAAI;MACJC,QAAQ;MACRC,UAAU;MACVc;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}